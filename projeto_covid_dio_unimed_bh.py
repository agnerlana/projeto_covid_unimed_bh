# -*- coding: utf-8 -*-
"""projeto_Covid_DIO_Unimed_BH.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VsfnJOCCZGpQwAFzupyIO1jUOhJ3bNnZ

## Projeto Covid - Bootcamp DIO Ciência de Dados Unimed-BH

Este projeto tem por objetivo realizar uma análise exploratória sobre a COVID-19 a partir de uma base de dados. Para tanto, foram avaliados padrões de disseminação da doença, incidência e mortalidade, os quais foram utilizados para construção de modelos Python e Machine Learning capazes de prever a evolução da doença baseado em alguns critérios.

A base de dados utilizada foi extraída do Kaggle, e está disponível em:

https://www.kaggle.com/datasets/unanimad/corona-virus-brazil

Esta base contém o informações sobre a COVID-19 por municípios brasileiros.
"""

from google.colab import drive
drive.mount('/content/drive')

# importando algumas bibliotecas a serem utilizadas
import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go

"""#### Importando e preparando a base de dados para análise"""

# carregando base de dados e visualizando as dimensoes
df = pd.read_csv("/content/drive/MyDrive/Bootcamp_DIO_Unimed-BH/brazil_covid19_cities.csv", parse_dates=['date'])
df.shape

# visualizando primeiras linhas
df.head()

# renomeando colunas
df = df.rename(columns = {"state":"estado", "name":"municipio", "code":"cod_municipio", "cases":"casos", "deaths":"obitos"})
df.head()

# visualizando formatos dos campos
df.dtypes

# alterando formato de alguns campos
df["cod_municipio"] = df["cod_municipio"].astype(str)
df["casos"] = df["casos"].astype(np.int64)
df.dtypes

"""#### Selecionando o recorte de interesse da base de dados (apenas registros de Belo Horizonte-MG)"""

# filtrando somente os registros de interesse, Belo Horizonte-MG
df_BH = df.loc[df["municipio"] == "Belo Horizonte"]
df_BH.head()

# visualizando as dimensoes da db_BH
df_BH.shape

# filtrando somente os registros onde há casos confirmados
df_BH = df_BH.loc[df_BH["casos"] > 0]
df_BH.head()

# visualizando as novas dimensoes da db_BH
df_BH.shape

# Resetando index e acrescentando como coluna na base
df_BH = df_BH.reset_index()
df_BH = df_BH.rename(columns = {"index":"id_row"})
df_BH["id_row"] = df_BH.index + 1
df_BH["id_row"] = df_BH["id_row"].astype(str)
df_BH.head()

"""## Análise exploratória"""

# Avaliando o intervalo de datas da base
print(f"O intervalo de datas da base está entre {df_BH['date'].min()} e {df_BH['date'].max()}")

# Gráfico de evoluçao dos casos confirmados
px.line(df_BH, x='date', y='casos', title='Casos confirmados em Belo Horizonte-MG')

# Gráfico de novos casos (incidência) durante o período
# Criando coluna de novos casos utilizando uma função lâmbda
df_BH["novos_casos"] = list(map(
    lambda x: 0 if (x == 0) else df_BH["casos"].iloc[x] - df_BH["casos"].iloc[x-1],
    np.arange(df_BH.shape[0])
))
df_BH.head()

# Plotando o gráfico de novos casos (incidência)
px.line(df_BH, x='date', y='novos_casos', title='Novos casos por dia')

# Óbitos no período
fig = go.Figure()

fig.add_trace(
    go.Scatter(x=df_BH.date, y=df_BH.obitos, name="obitos",
               mode='lines', line={'color':'brown'})
)

# layout do gráfico
fig.update_layout(title="Óbitos por COVID-19 em Belo Horizonte-MG no período")

fig.show()

## Criando função para calcular Taxa de crescimento médio

# taxa_crescimento = (valor_presente/valor_passado)**(1/n)-1

def taxa_crescimento(dados, variavel, data_inicio=None, data_fim=None):
    if data_inicio == None:
        data_inicio = dados["date"].loc[dados[variavel] > 0].min()
    else:
        data_inicio = pd.to_datetime(data_inicio)
    
    if data_fim == None:
        data_fim = dados["date"].iloc[-1]
    else:
        data_fim = pd.to_datetime(data_fim)
    
    # Definindo valor presente e valor passado
    valor_passado = dados.loc[dados["date"] == data_inicio, variavel].values[0]
    valor_presente = dados.loc[dados["date"] == data_fim, variavel].values[0]
    
    # Definindo o intervalo de tempo em dias
    n = (data_fim - data_inicio).days
    
    # Calculando a taxa de crescimento
    taxa = (valor_presente/valor_passado)**(1/n) - 1
    
    return taxa*100

# Taxa de crescimento médio da COVID em Belo Horizonte no período
taxa_crescimento_BH = taxa_crescimento(df_BH, "casos")
print(f"Em Belo Horizonte, durante o período avaliado, a taxa média de crescimento dos casos de COVID foi de{taxa_crescimento_BH: .2f} ao dia.")

## Criando função para calcular Taxa de crescimento diário

def taxa_crescimento_diario(dados, variavel, data_inicio=None):
    if data_inicio == None:
        data_inicio = dados["date"].loc[dados[variavel] > 0].min()
    else:
        data_inicio = pd.to_datetime(data_inicio)
    
    data_fim = dados["date"].max()

    # Definindo o intervalo de tempo em dias
    n = (data_fim - data_inicio).days
    
    # Taxa calculada diariamente
    taxas = list(map(
        lambda x: (dados[variavel].iloc[x] - dados[variavel].iloc[x-1]) / dados[variavel].iloc[x-1],
        range(1, n+1)
    ))
    
    return np.array(taxas) * 100

# Taxas de crescimento diários da COVID em Belo Horizonte no período
taxas_diarias_BH = taxa_crescimento_diario(df_BH, "casos")
taxas_diarias_BH

primeiro_dia = df_BH["date"].min()
ultimo_dia = df_BH["date"].max()

px.line(x=pd.date_range(primeiro_dia, ultimo_dia)[1:],
        y=taxas_diarias_BH, title="Taxa de crescimento diário dos casos confirmados de COVID em Belo Horizonte.")

"""## Análise Preditivas"""

# importando bibliotecas a serem utilizadas
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose

# criando nova base de dados para análise preditiva
casos_BH = df_BH["casos"]
casos_BH.index = df_BH["date"]
casos_BH

# decompondo a série
res = seasonal_decompose(casos_BH)

fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(10,8))

ax1.plot(res.observed)
ax2.plot(res.trend)
ax3.plot(res.seasonal)
ax4.plot(casos_BH.index, res.resid)
ax4.axhline(0, linestyle="dashed", color="black")
plt.show()

"""#### Modelando os dados utilizando ARIMA"""

# instalando pacote necessário
! pip install pmdarima

# importando a biblioteca necessária
from pmdarima.arima import auto_arima

# criando o modelo ARIMA a partir dos dados
modelo = auto_arima(casos_BH)

# plotando os resultados do modelo
fig = go.Figure(go.Scatter(x=casos_BH.index, y=casos_BH, name="observados"))

fig.add_trace(go.Scatter(x=casos_BH.index, y=modelo.predict_in_sample(), name="preditos"))
fig.add_trace(go.Scatter(x=pd.date_range("2021-05-24", "2021-06-24"), y=modelo.predict(31), name="Forecast"))
fig.update_layout(title="Previsão de casos confirmados em Belo Horizonte para os próximos 30 dias")

fig.show()

"""#### Modelando de Crescimento"""

! pip install prophet

# importando a biblioteca necessária
from prophet import Prophet

# Preprocessamento dos dados

train = casos_BH.reset_index()[:-5]
test = casos_BH.reset_index()[-5:]

# Renomeando as colunas (exigencia da biblioteca)
train.rename(columns={"date":"ds", "casos":"y"}, inplace=True)
test.rename(columns={"date":"ds", "casos":"y"}, inplace=True)

# Definindo o modelo de crescimento
predicao = Prophet(growth='logistic', changepoints=['2020-05-04', '2020-07-02','2021-01-05', '2021-02-20'])

# Populacao Belo Horizonte - estimada 2021 (https://cidades.ibge.gov.br/brasil/mg/belo-horizonte/panorama)
# consulta realizada em 27/10/2022
pop_BH = 2530701
train["cap"] = pop_BH # cap referente à capacidade

# Treinando o modelo
predicao.fit(train)

# Construindo predicoes para o futuro
datas_futuras = predicao.make_future_dataframe(periods=1000)
datas_futuras["cap"] = pop_BH
forecast = predicao.predict(datas_futuras)

# Plotando gráficos para demonstrar a predição
fig = go.Figure()

fig.add_trace(go.Scatter(x=forecast.ds, y=forecast.yhat, name="Predicao"))
fig.add_trace(go.Scatter(x=train.ds, y=train.y, name="observados - treino"))
fig.update_layout(title="Predições de casos de COVID em Belo Horizonte-MG")
fig.show()

"""#### ----------------------------"""